name: CI


on:
  pull_request: {}
  push:
    branches:
    - master
    tags:
    - "*"

## Jobs by event type and dependencies:

# Unit tests for every master/tag push and PR:
#
# download_src
#   -> validate_go_deps
#   -> go_unit_tests
#   -> go_lint
#   -> js_unit_tests

# Docker build and integration tests for every master/tag push and linkerd org PR:
#
# download_src
#   -> docker_pull
#   -> docker_build
#   -> kind_setup
#     -> kind_integration
#       -> kind_cleanup

# Docker deploy and cloud integration tests for every master/tag push:
#
#         -> docker_deploy
#           -> cloud_integration
#             -> cloud_cleanup

jobs:

  #
  # Unit tests run for:
  # - every master push
  # - every tag push
  # - every PR
  #

  #
  # download_src checks out the source with actions/checkout and then tars
  # and uploads the .git directory into the build artifacts storage.
  # Every job afterwards downloads that and clones from it to get the source
  # again. We only use actions/checkout once because of
  # https://github.com/actions/checkout/issues/27
  #

  download_src:
    name: Checkout source
    runs-on: ubuntu-18.04
    steps:
    # for debugging
    - name: Dump env
      run: |
        env | sort
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJson(job) }}
      run: echo "$JOB_CONTEXT"
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Create .git artifact
      run: |
        bin/root-tag
        tar zcf linkerd2.$GITHUB_SHA.tar.gz .git/
    - name: Upload .git artifact
      uses: actions/upload-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: linkerd2.${{ github.sha }}.tar.gz

  validate_go_deps:
    name: Validate go deps
    runs-on: ubuntu-18.04
    needs: [download_src]
    steps:
    # TODO: when github actions adds support for anchors, use it here
    # to avoid repeting these two steps on every job
    - name: Download .git artifact
      uses: actions/download-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Clone source
      run: |
        tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
        git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    - name: Validate go deps
      run: |
        . bin/_tag.sh
        #### Commenting this for workflow development work ####
        # for f in $( grep -lR --include=Dockerfile\* go-deps: . ) ; do
        #   validate_go_deps_tag $f
        # done
  go_unit_tests:
    name: Go unit tests
    runs-on: ubuntu-18.04
    needs: [download_src]
    container:
      image: golang:1.13.4
    steps:
    - name: Download .git artifact
      uses: actions/download-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Clone source
      run: |
        tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
        git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    - name: Go unit tests
      env:
        GITCOOKIE_SH: ${{ secrets.GITCOOKIE_SH }}
      run: |
        echo "$GITCOOKIE_SH" | bash
        # TODO: validate bin/protoc-go.sh does not dirty the repo
        #### Commenting this for workflow development work ####
        # go test -cover -race -v -mod=readonly ./...
  go_lint:
    name: Go lint
    runs-on: ubuntu-18.04
    needs: [download_src]
    container:
      image: golang:1.13.4
    steps:
    - name: Download .git artifact
      uses: actions/download-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Clone source
      run: |
        tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
        git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    - name: Go lint
      env:
        GITCOOKIE_SH: ${{ secrets.GITCOOKIE_SH }}
        # prevent OOM
        GOGC: 20
      run: |
        echo "$GITCOOKIE_SH" | bash
        #### Commenting this for workflow development work ####
        # bin/lint --verbose
  go_fmt:
    name: Go Format
    runs-on: ubuntu-18.04
    needs: [download_src]
    container:
      image: golang:1.13.4
    steps:
    - name: Download .git artifact
      uses: actions/download-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Clone source
      run: |
        tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
        git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    - name: Format
      env:
        GITCOOKIE_SH: ${{ secrets.GITCOOKIE_SH }}
      run: |
        echo "$GITCOOKIE_SH" | bash
        #### Commenting this for workflow development work ####
        # bin/fmt
  js_unit_tests:
    name: JS unit tests
    runs-on: ubuntu-18.04
    needs: [download_src]
    container:
      image: node:10.16.0-stretch
    steps:
    - name: Download .git artifact
      uses: actions/download-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Clone source
      run: |
        tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
        git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    - name: Yarn setup
      run: |
        curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.16.0
    - name: JS unit tests
      run: |
        export PATH="$HOME/.yarn/bin:$PATH"
        export NODE_ENV=test
        #### Commenting this for workflow development work ####
        # bin/web
        # bin/web test --reporters=jest-dot-reporter
  #
  # Docker build and kind integration tests run for:
  # - every master push
  # - every tag push
  # - every PR from a linkerd org member
  #

  docker_pull:
    name: Docker pull
    runs-on: ubuntu-18.04
    needs: [download_src]
    steps:
    - name: Download .git artifact
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      uses: actions/download-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Clone source
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      run: |
        tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
        git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    - name: Docker SSH setup
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      env:
        DOCKER_ADDRESS: ${{ secrets.DOCKER_ADDRESS }}
        DOCKER_HOST_PRIVATE_KEY: ${{ secrets.DOCKER_HOST_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh/
        echo "$DOCKER_HOST_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan $DOCKER_ADDRESS >> ~/.ssh/known_hosts
    - name: Docker pull
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      env:
        DOCKER_HOST: ssh://github@${{ secrets.DOCKER_ADDRESS }}
      run: |
        bin/docker pull gcr.io/linkerd-io/proxy-init:v1.2.0
        bin/docker pull prom/prometheus:v2.11.1
  docker_build:
    name: Docker build
    runs-on: ubuntu-18.04
    needs: [download_src]
    steps:
    - name: Download .git artifact
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      uses: actions/download-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Clone source
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      run: |
        tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
        git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    - name: Docker SSH setup
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      env:
        DOCKER_ADDRESS: ${{ secrets.DOCKER_ADDRESS }}
        DOCKER_HOST_PRIVATE_KEY: ${{ secrets.DOCKER_HOST_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh/
        echo "$DOCKER_HOST_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan $DOCKER_ADDRESS >> ~/.ssh/known_hosts
    - name: Docker build
      if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
      env:
        DOCKER_HOST: ssh://github@${{ secrets.DOCKER_ADDRESS }}
      run: |
        export PATH="`pwd`/bin:$PATH"
        # DOCKER_TRACE=1 bin/docker-build
  # kind_setup:
  #   strategy:
  #     matrix:
  #       integration_test: [deep, upgrade, helm, custom_domain, external_issuer]
  #   name: Cluster setup (${{ matrix.integration_test }})
  #   runs-on: ubuntu-18.04
  #   needs: [download_src]
  #   steps:
  #   - name: Download .git artifact
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: linkerd2-src-${{ github.sha }}
  #       path: ${{ runner.temp }}
  #   - name: Clone source
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     run: |
  #       tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
  #       git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
  #   - name: Docker SSH setup
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     env:
  #       DOCKER_ADDRESS: ${{ secrets.DOCKER_ADDRESS }}
  #       DOCKER_HOST_PRIVATE_KEY: ${{ secrets.DOCKER_HOST_PRIVATE_KEY }}
  #     run: |
  #       mkdir -p ~/.ssh/
  #       echo "$DOCKER_HOST_PRIVATE_KEY" > ~/.ssh/id_rsa
  #       chmod 600 ~/.ssh/id_rsa
  #       ssh-keyscan $DOCKER_ADDRESS >> ~/.ssh/known_hosts
  #   - name: Kind cluster setup
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     env:
  #       DOCKER_ADDRESS: ${{ secrets.DOCKER_ADDRESS }}
  #       DOCKER_HOST: ssh://github@${{ secrets.DOCKER_ADDRESS }}
  #     run: |
  #       TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
  #       export KIND_CLUSTER=github-$TAG-${{ matrix.integration_test }}
  #       export CUSTOM_DOMAIN_CONFIG="test/testdata/custom_cluster_domain_config.yaml"
  #       # retry cluster creation once in case of port conflict or kubeadm failure
  #       if [ "${{ matrix.integration_test }}" == "custom_domain" ]
  #       then
  #         bin/kind create cluster --name=$KIND_CLUSTER --wait=2m --loglevel debug --config=$CUSTOM_DOMAIN_CONFIG ||
  #           bin/kind create cluster --name=$KIND_CLUSTER --wait=2m --loglevel debug --config=$CUSTOM_DOMAIN_CONFIG
  #       else
  #         bin/kind create cluster --name=$KIND_CLUSTER --wait=2m --loglevel debug ||
  #           bin/kind create cluster --name=$KIND_CLUSTER --wait=2m --loglevel debug
  #       fi
  #       scp $(bin/kind get kubeconfig-path --name=$KIND_CLUSTER) github@$DOCKER_ADDRESS:/tmp

  # kind_integration:
  #   strategy:
  #     matrix:
  #       integration_test: [deep, upgrade, helm, custom_domain, external_issuer]
  #   needs: [docker_pull, docker_build, kind_setup]
  #   name: Integration tests (${{ matrix.integration_test }})
  #   runs-on: ubuntu-18.04
  #   steps:
  #   - name: Download .git artifact
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: linkerd2-src-${{ github.sha }}
  #       path: ${{ runner.temp }}
  #   - name: Clone source
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     run: |
  #       tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
  #       git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
  #   - name: Docker SSH setup
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     env:
  #       DOCKER_ADDRESS: ${{ secrets.DOCKER_ADDRESS }}
  #       DOCKER_HOST_PRIVATE_KEY: ${{ secrets.DOCKER_HOST_PRIVATE_KEY }}
  #     run: |
  #       mkdir -p ~/.ssh/
  #       echo "$DOCKER_HOST_PRIVATE_KEY" > ~/.ssh/id_rsa
  #       chmod 600 ~/.ssh/id_rsa
  #       ssh-keyscan $DOCKER_ADDRESS >> ~/.ssh/known_hosts
  #   - name: Kind load docker images
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     env:
  #       DOCKER_ADDRESS: ${{ secrets.DOCKER_ADDRESS }}
  #     run: |
  #       TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
  #       export KIND_CLUSTER=github-$TAG-${{ matrix.integration_test }}
  #       ssh -T github@$DOCKER_ADDRESS &> /dev/null << EOF
  #         # TODO: This is using the kind binary on the remote host.
  #         kind load docker-image gcr.io/linkerd-io/proxy-init:v1.2.0 --name=$KIND_CLUSTER
  #         kind load docker-image prom/prometheus:v2.11.1 --name=$KIND_CLUSTER
  #         for IMG in controller grafana proxy web ; do
  #           kind load docker-image gcr.io/linkerd-io/\$IMG:$TAG --name=$KIND_CLUSTER
  #         done
  #       EOF
  #   - name: Install linkerd CLI
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     env:
  #       DOCKER_HOST: ssh://github@${{ secrets.DOCKER_ADDRESS }}
  #     run: |
  #       TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
  #       image="gcr.io/linkerd-io/cli-bin:$TAG"
  #       id=$(bin/docker create $image)
  #       bin/docker cp "$id:/out/linkerd-linux" "$HOME/.linkerd"
  #       $HOME/.linkerd version --client
  #       # validate CLI version matches the repo
  #       [[ "$TAG" == "$($HOME/.linkerd version --short --client)" ]]
  #       echo "Installed Linkerd CLI version: $TAG"
  #   - name: Run integration tests
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     env:
  #       DOCKER_ADDRESS: ${{ secrets.DOCKER_ADDRESS }}
  #       DOCKER_HOST: ssh://github@${{ secrets.DOCKER_ADDRESS }}
  #       GITCOOKIE_SH: ${{ secrets.GITCOOKIE_SH }}
  #     run: |
  #       export PATH="`pwd`/bin:$PATH"
  #       echo "$GITCOOKIE_SH" | bash
  #       # TODO: pin Go version
  #       go version
  #       TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
  #       export KIND_CLUSTER=github-$TAG-${{ matrix.integration_test }}
  #       # Restore kubeconfig from remote docker host.
  #       mkdir -p $HOME/.kube
  #       scp github@$DOCKER_ADDRESS:/tmp/kind-config-$KIND_CLUSTER $HOME/.kube
  #       export KUBECONFIG=$(bin/kind get kubeconfig-path --name=$KIND_CLUSTER)
  #       # Start ssh tunnel to allow kubectl to connect via localhost.
  #       export KIND_PORT=$(bin/kubectl config view -o jsonpath="{.clusters[?(@.name=='$KIND_CLUSTER')].cluster.server}" | cut -d':' -f3)
  #       ssh -4 -N -L $KIND_PORT:localhost:$KIND_PORT github@$DOCKER_ADDRESS &
  #       sleep 2 # Wait for ssh tunnel to come up.
  #       bin/kubectl version --short # Test connection to kind cluster.
  #       (
  #         . bin/_test-run.sh
  #         init_test_run $HOME/.linkerd
  #         ${{ matrix.integration_test }}_integration_tests
  #       )

  # kind_cleanup:
  #   if: always()
  #   strategy:
  #     fail-fast: false # always attempt to cleanup all clusters
  #     matrix:
  #       integration_test: [deep, upgrade, helm, custom_domain, external_issuer]
  #   needs: [kind_integration]
  #   name: Cluster cleanup (${{ matrix.integration_test }})
  #   runs-on: ubuntu-18.04
  #   steps:
  #   - name: Download .git artifact
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: linkerd2-src-${{ github.sha }}
  #       path: ${{ runner.temp }}
  #   - name: Clone source
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     run: |
  #       tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
  #       git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
  #   # for debugging
  #   - name: Dump env
  #     run: |
  #       env | sort
  #   - name: Dump GitHub context
  #     env:
  #       GITHUB_CONTEXT: ${{ toJson(github) }}
  #     run: echo "$GITHUB_CONTEXT"
  #   - name: Dump job context
  #     env:
  #       JOB_CONTEXT: ${{ toJson(job) }}
  #     run: echo "$JOB_CONTEXT"
  #   - name: Docker SSH setup
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     env:
  #       DOCKER_ADDRESS: ${{ secrets.DOCKER_ADDRESS }}
  #       DOCKER_HOST_PRIVATE_KEY: ${{ secrets.DOCKER_HOST_PRIVATE_KEY }}
  #     run: |
  #       mkdir -p ~/.ssh/
  #       echo "$DOCKER_HOST_PRIVATE_KEY" > ~/.ssh/id_rsa
  #       chmod 600 ~/.ssh/id_rsa
  #       ssh-keyscan $DOCKER_ADDRESS >> ~/.ssh/known_hosts
  #   - name: Kind cluster cleanup
  #     if: github.event_name != 'pull_request' || !github.event.pull_request.head.repo.fork
  #     env:
  #       DOCKER_HOST: ssh://github@${{ secrets.DOCKER_ADDRESS }}
  #     run: |
  #       TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
  #       export KIND_CLUSTER=github-$TAG-${{ matrix.integration_test }}
  #       bin/kind delete cluster --name=$KIND_CLUSTER

  #
  # Docker deploy and cloud integration tests run for:
  # - every master push
  # - every tag push
  #

  docker_deploy:
    name: Docker deploy
    runs-on: ubuntu-18.04
    # needs: [validate_go_deps, go_unit_tests, go_lint, js_unit_tests, kind_integration, kind_cleanup]
    needs: [validate_go_deps, go_unit_tests, go_lint, js_unit_tests ]
    steps:
    - name: Download .git artifact
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      uses: actions/download-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Clone source
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      run: |
        tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
        git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    - name: Docker SSH setup
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      env:
        DOCKER_ADDRESS: ${{ secrets.DOCKER_ADDRESS }}
        DOCKER_HOST_PRIVATE_KEY: ${{ secrets.DOCKER_HOST_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh/
        echo "$DOCKER_HOST_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan $DOCKER_ADDRESS >> ~/.ssh/known_hosts
    - name: Configure gcloud
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      env:
        CLOUDSDK_CORE_DISABLE_PROMPTS: "1"
        CLOUD_SDK_SERVICE_ACCOUNT_KEY: ${{ secrets.CLOUD_SDK_SERVICE_ACCOUNT_KEY }}
        GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        GCP_ZONE: ${{ secrets.GCP_ZONE }}
      run: |
        # Install gcloud and kubectl.
        echo "$CLOUD_SDK_SERVICE_ACCOUNT_KEY" > .gcp.json
        dir="${CLOUDSDK_INSTALL_DIR:-${HOME}}/google-cloud-sdk"
        (
          . bin/_gcp.sh ;
          install_gcloud "$dir"
          gcloud components install kubectl
          # Configure gcloud with a service account.
          set_gcloud_project "$GCP_PROJECT" "$GCP_ZONE"
        )
        . "$dir/path.bash.inc"
        gcloud auth configure-docker
    - name: Docker push
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      env:
        DOCKER_HOST: ssh://github@${{ secrets.DOCKER_ADDRESS }}
      run: |
        export PATH="`pwd`/bin:$PATH"
        #### Commenting this for workflow development work ####
        # TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
        # bin/docker-push-deps
        # bin/docker-push $TAG
        # bin/docker-retag-all $TAG master
        # bin/docker-push master
  # cloud_cleanup:
  #   if: always()
  #   name: Cloud cleanup
  #   runs-on: ubuntu-18.04
  #   needs: [cloud_integration]
  #   steps:
  #   - name: Download .git artifact
  #     if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: linkerd2-src-${{ github.sha }}
  #       path: ${{ runner.temp }}
  #   - name: Clone source
  #     if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
  #     run: |
  #       tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
  #       git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
  #   - name: Configure gcloud
  #     if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
  #     env:
  #       CLOUDSDK_CORE_DISABLE_PROMPTS: "1"
  #       CLOUD_SDK_SERVICE_ACCOUNT_KEY: ${{ secrets.CLOUD_SDK_SERVICE_ACCOUNT_KEY }}
  #       GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
  #       GCP_ZONE: ${{ secrets.GCP_ZONE }}
  #       GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  #     run: |
  #       # Install gcloud and kubectl.
  #       echo "$CLOUD_SDK_SERVICE_ACCOUNT_KEY" > .gcp.json
  #       dir="${CLOUDSDK_INSTALL_DIR:-${HOME}}/google-cloud-sdk"
  #       (. bin/_gcp.sh ;
  #         install_gcloud "$dir"
  #         gcloud components install kubectl
  #         # Configure gcloud with a service account.
  #         set_gcloud_cluster "$GCP_PROJECT" "$GCP_ZONE" "$GKE_CLUSTER"
  #         # Get a kubernetes context.
  #         get_k8s_ctx "$GCP_PROJECT" "$GCP_ZONE" "$GKE_CLUSTER"
  #       )
  #       . "$dir/path.bash.inc"
  #       gcloud auth configure-docker
  #       bin/kubectl version --short
  #   - name: Cleanup
  #     if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
  #     run: |
  #       export PATH="`pwd`/bin:$PATH"
  #       bin/test-cleanup

  gcp_cloud_integration:
    strategy:
      fail-fast: false # always attempt to cleanup all clusters
      matrix:
        cloud_integration_test: [deep, upgrade, helm, custom_domain, external_issuer]
    name: GCP Cloud integration tests - ${{ matrix.cloud_integration_test }}
    runs-on: ubuntu-18.04
    needs: [docker_deploy]
    steps:
    - name: Download .git artifact
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      uses: actions/download-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Clone source
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      run: |
        tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
        git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    - name: Configure gcloud and spawn temporary K8s cluster
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      env:
        CLOUDSDK_CORE_DISABLE_PROMPTS: "1"
        CLOUD_SDK_SERVICE_ACCOUNT_KEY: ${{ secrets.CLOUD_SDK_SERVICE_ACCOUNT_KEY }}
        GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        GCP_ZONE: ${{ secrets.GCP_ZONE }}
      run: |
        # Install gcloud and kubectl.
        echo "$CLOUD_SDK_SERVICE_ACCOUNT_KEY" > .gcp.json
        dir="${CLOUDSDK_INSTALL_DIR:-${HOME}}/google-cloud-sdk"
        # Flagging current cloud 
        target_cloud="gcp"
        # Creating a unique name for this commit
        export GKE_CLUSTER=$(tr -d '_' <<< ${{ matrix.cloud_integration_test }}-${GITHUB_SHA::6})
        (
          . bin/_gcp.sh ;
          install_gcloud "$dir"
          gcloud components install kubectl
          # Configure gcloud with a service account.
          set_gcloud_project "$GCP_PROJECT" "$GCP_ZONE"
          # Loading cluster config from project
          k8s_version=$(get_default_k8s_version)
          . test/testdata/cloud_config/${target_cloud}/${{ matrix.cloud_integration_test }}.conf
          # Spawn a new cluster
          create_cluster "${GKE_CLUSTER}" "${k8s_version}" "${cluster_size}" "${machine_type}"
          # Get a kubernetes context.
          get_k8s_ctx "$GCP_PROJECT" "$GCP_ZONE" "$GKE_CLUSTER"
        )
        . "$dir/path.bash.inc"
        gcloud auth configure-docker
        bin/kubectl version --short
    - name: Install linkerd CLI
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      env:
        DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
      run: |
        #### Commenting this for workflow development work ####
        # TAG="$(CI_FORCE_CLEAN=1 bin/root-tag)"
        # image="${DOCKER_REGISTRY}/cli-bin:$TAG"
        # id=$(bin/docker create $image)
        # bin/docker cp "$id:/out/linkerd-linux" "$HOME/.linkerd"
        # $HOME/.linkerd version --client
        # # validate CLI version matches the repo
        # [[ "$TAG" == "$($HOME/.linkerd version --short --client)" ]]
        # echo "Installed Linkerd CLI version: $TAG"
        #### Adding this for workflow development work ####
        curl https://run.linkerd.io/install-edge | sh
        ln -sf ~/.linkerd2/bin/linkerd ~/.linkerd
    - name: Run integration tests - ${{ matrix.cloud_integration_test }}
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      env:
        GITCOOKIE_SH: ${{ secrets.GITCOOKIE_SH }}
      run: |
        export PATH="`pwd`/bin:$PATH"
        echo "$GITCOOKIE_SH" | bash
        version="$($HOME/.linkerd version --client --short | tr -cd '[:alnum:]-')"
        # version=git-09703a58
        (
          . bin/_test-run.sh
          init_test_run $HOME/.linkerd
          ${{ matrix.cloud_integration_test }}_integration_tests
        )
    - name: CNI tests
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      run: |
        export TAG="$($HOME/.linkerd version --client --short)"
        go test -cover -race -v -mod=readonly ./cni-plugin/test -integration-tests
  gcp_cloud_cleanup:
    if: always()
    strategy:
      fail-fast: false # always attempt to cleanup all clusters
      matrix:
        cloud_integration_test: [deep, upgrade, helm, custom_domain, external_issuer]
    name: GCP Cloud Cleanup - ${{ matrix.cloud_integration_test }}
    runs-on: ubuntu-18.04
    needs: [gcp_cloud_integration]
    steps:
    - name: Download .git artifact
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      uses: actions/download-artifact@v1
      with:
        name: linkerd2-src-${{ github.sha }}
        path: ${{ runner.temp }}
    - name: Clone source
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      run: |
        tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
        git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    - name: Configure gcloud and cleanup temporary K8s cluster
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      env:
        CLOUDSDK_CORE_DISABLE_PROMPTS: "1"
        CLOUD_SDK_SERVICE_ACCOUNT_KEY: ${{ secrets.CLOUD_SDK_SERVICE_ACCOUNT_KEY }}
        GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        GCP_ZONE: ${{ secrets.GCP_ZONE }}
      run: |
        # Install gcloud and kubectl.
        echo "$CLOUD_SDK_SERVICE_ACCOUNT_KEY" > .gcp.json
        dir="${CLOUDSDK_INSTALL_DIR:-${HOME}}/google-cloud-sdk"
        # Creating a unique name for this commit
        export GKE_CLUSTER=$(tr -d '_' <<< ${{ matrix.cloud_integration_test }}-${GITHUB_SHA::6})
        (. bin/_gcp.sh ;
          install_gcloud "$dir"
          gcloud components install kubectl
          # Configure gcloud with a service account.
          set_gcloud_cluster "$GCP_PROJECT" "$GCP_ZONE" "$GKE_CLUSTER"
          # Cleanup Cluster
          destroy_cluster "$GKE_CLUSTER"
        )
  #
  # Helm chart artifact deploy run for:
  # - every tag push
  #

  # chart_deploy:
    # name: Helm chart deploy
    # runs-on: ubuntu-18.04
    # needs: [cloud_integration]
    # steps:
    # - name: Download .git artifact
    #   if: startsWith(github.ref, 'refs/tags')
    #   uses: actions/download-artifact@v1
    #   with:
    #     name: linkerd2-src-${{ github.sha }}
    #     path: ${{ runner.temp }}
    # - name: Clone source
    #   if: startsWith(github.ref, 'refs/tags')
    #   run: |
    #     tar -C $RUNNER_TEMP -zxf $RUNNER_TEMP/linkerd2.$GITHUB_SHA.tar.gz
    #     git clone $RUNNER_TEMP/.git $GITHUB_WORKSPACE
    # - name: Configure gsutils
    #   if: startsWith(github.ref, 'refs/tags')
    #   env:
    #     CLOUDSDK_CORE_DISABLE_PROMPTS: "1"
    #     CLOUD_SDK_SERVICE_ACCOUNT_KEY: ${{ secrets.LINKERD_SITE_TOKEN }}
    #     GCP_PROJECT: ${{ secrets.LINKERD_SITE_PROJECT }}
    #     GCP_ZONE: ${{ secrets.LINKERD_SITE_ZONE }}
    #     GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
    #   run: |
    #     # Install gcloud and gsutil.
    #     echo "$CLOUD_SDK_SERVICE_ACCOUNT_KEY" > .gcp.json
    #     dir="${CLOUDSDK_INSTALL_DIR:-${HOME}}/google-cloud-sdk"
    #     (
    #       . bin/_gcp.sh ;
    #       install_gcloud "$dir"
    #       gcloud components install gsutil
    #       # Configure gcloud with a service account.
    #       set_gcloud_cluster "$GCP_PROJECT" "$GCP_ZONE" "$GKE_CLUSTER"
    #     )
    #     . "$dir/path.bash.inc"
    #     mkdir -p target/helm
    # - name: Edge Helm chart creation and upload
    #   if: startsWith(github.ref, 'refs/tags/edge')
    #   run: |
    #     gsutil cp gs://helm.linkerd.io/edge/index.yaml target/helm/index-pre.yaml
    #     bin/helm-build package
    #     gsutil rsync target/helm gs://helm.linkerd.io/edge
    # - name: Stable Helm chart creation and upload
    #   if: startsWith(github.ref, 'refs/tags/stable')
    #   run: |
    #     gsutil cp gs://helm.linkerd.io/stable/index.yaml target/helm/index-pre.yaml
    #     bin/helm-build package
    #     gsutil rsync target/helm gs://helm.linkerd.io/stable